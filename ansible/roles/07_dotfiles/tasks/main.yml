---
# Ensure Zsh is installed and set as login shell if configured.
- name: Ensure Zsh is installed
  ansible.builtin.package:
    name: zsh
    state: present

- name: Change login shell to Zsh for the current user
  become: true
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    shell: /bin/zsh
  when: set_zsh_as_login_shell and ansible_env.SHELL != '/usr/bin/zsh'

# Setup antidote for Zsh (only for Arch Linux).
- name: Ensure yay is installed (Arch Linux)
  community.general.pacman:
    name: yay
    state: present
  when: ansible_distribution == "Archlinux"

- name: Install antidote using yay (Arch Linux)
  kewlfft.aur.aur:
    name: antidote-git
    state: present

# Create a .profile file with XDG environment variables.
- name: Create .profile with XDG variables
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.profile"
    content: |
      export XDG_CONFIG_HOME="{{ xdg_config_home }}"
      export XDG_DATA_HOME="{{ xdg_data_home }}"
      export XDG_CACHE_HOME="{{ xdg_cache_home }}"
      export XDG_STATE_HOME="{{ xdg_state_home }}"

# Create necessary directories.
- name: Create Zsh state directory
  ansible.builtin.file:
    path: "{{ xdg_state_home }}/zsh"
    state: directory

- name: Ensure dotfiles base directory exists
  ansible.builtin.file:
    path: "{{ user_config_home }}"
    state: directory
    owner: "{{ ansible_user }}"
    mode: '0755'

# Clone external repositories.
- name: Clone neovim config repository
  ansible.builtin.git:
    repo: "{{ nvim_github }}"
    dest: "{{ nvim_repo }}"
    update: yes

- name: Clone shell dotfiles repository
  ansible.builtin.git:
    repo: "{{ dotfiles_github }}"
    dest: "{{ dotfiles_repo }}"   # Use consistent variable name here.
    update: yes

# Load dotfiles symlink definitions from symlinks.yml
- name: Load dotfiles symlink definitions from symlinks.yml
  ansible.builtin.include_vars:
    file: "{{ dotfiles_repo }}/symlinks.yml"
    name: symlink_definitions

# Ensure parent directories exist for each symlink destination.
- name: Ensure parent directories exist for dotfile symlinks
  ansible.builtin.file:
    path: "{{ (item.value.dest | regex_replace('\\$HOME', ansible_env.HOME) | regex_replace('\\$XDG_CONFIG_HOME', xdg_config_home)) | dirname }}"
    state: directory
    mode: '0755'
  loop: "{{ symlink_definitions | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

# Backup existing destination if it exists and is not a symlink.
# - name: Check existing destination for dotfile symlink
#   ansible.builtin.stat:
#     path: "{{ item.value.dest | regex_replace('\\$HOME', ansible_env.HOME) | regex_replace('\\$XDG_CONFIG_HOME', xdg_config_home) }}"
#   register: dest_stat
#   loop: "{{ symlink_definitions | dict2items }}"
#   loop_control:
#     label: "{{ item.key }}"
#
# - name: Backup non-symlink file (if present)
#   ansible.builtin.command: >
#     mv "{{ item.item.value.dest | regex_replace('\\$HOME', ansible_env.HOME) | regex_replace('\\$XDG_CONFIG_HOME', xdg_config_home) }}"
#     "{{ item.item.value.dest | regex_replace('\\$HOME', ansible_env.HOME) | regex_replace('\\$XDG_CONFIG_HOME', xdg_config_home) }}.bk-{{ lookup('pipe','date +%Y%m%d%H%M%S') }}"
#   loop: "{{ dest_stat.results }}"
#   loop_control:
#     label: "{{ item.item.key }}"
#   when: item.stat.exists and (not item.stat.islnk)
#   ignore_errors: yes

# Create symlinks based on the definitions.
- name: Create symlinks for dotfiles
  ansible.builtin.file:
    src: "{{ dotfiles_repo }}/{{ item.value.src }}"
    dest: "{{ item.value.dest | regex_replace('\\$HOME', ansible_env.HOME) | regex_replace('\\$XDG_CONFIG_HOME', xdg_config_home) }}"
    state: link
    force: yes
  loop: "{{ symlink_definitions | dict2items }}"
  loop_control:
    label: "{{ item.key }}"

# Neovim-specific tasks (symlinking configuration)
- name: Ensure parent directory for Neovim exists
  ansible.builtin.file:
    path: "{{ xdg_config_home }}"
    state: directory
    mode: '0755'

- name: Create symlink for Neovim configuration
  ansible.builtin.file:
    src: "{{ nvim_repo }}/config"
    dest: "{{ xdg_config_home }}/nvim"
    state: link
    force: yes

# Configure Git user settings.
- name: Decode email address
  ansible.builtin.set_fact:
    git_user_email: "{{ private_email_b64 | b64decode }}"

- name: Create git-user configuration file
  ansible.builtin.copy:
    dest: "{{ dotfiles_repo }}/.private/git.user.conf"
    content: |
      [user]
          name = {{ full_name }}
          email = {{ git_user_email }}
    mode: '0600'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
